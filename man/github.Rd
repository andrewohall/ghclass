% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/github.R, R/github_api_limit.R,
%   R/github_token.R, R/github_whoami.R
\name{github}
\alias{github}
\alias{github_get_api_limit}
\alias{github_set_api_limit}
\alias{github_get_token}
\alias{github_set_token}
\alias{github_reset_token}
\alias{github_test_token}
\alias{github_whoami}
\title{GitHub API related tools}
\usage{
github_get_api_limit()

github_set_api_limit(limit = 1000L)

github_get_token()

github_set_token(token)

github_reset_token()

github_test_token(token = github_get_token())

github_whoami(quiet = FALSE)
}
\arguments{
\item{limit}{The maximum number of records to return from an API request.}

\item{token}{Character. Either the literal token path, or the path of a file containing the token.}

\item{quiet}{Logical. Should status messages be shown.}
}
\description{
\code{github_whoami} returns the login of the authenticated user.

\code{github_get_api_limit} / \code{github_set_api_limit} - get and set the limit of results to return from
the GitHub API.

\code{github_get_token} returns the user's GitHub personal access token (PAT).

\code{github_set_token} defines the user's GitHub PAT by setting the \code{GITHUB_PAT} enivronmental variable. This value can then

\code{github_reset_token} removes the value stored in the \code{GITHUB_PAT} environmental variable.

\code{github_test_token} checks if a PAT is valid by attempting to authenticate with the GitHub API
}
\details{
This package looks for the personal access token (PAT) in the following places (in order):
\itemize{
\item Value of \code{GITHUB_PAT} environmental variable.
\item Value of \code{GITHUB_TOKEN} environmental variable.
\item Contents of \verb{~/.github/token} file.
}
}
\examples{
# whoami
github_whoami()

# Set the API request limit
github_get_api_limit()
github_set_api_limit(500)
github_get_api_limit()

# Set and get the PAT
github_set_token("~/.github/token")
github_set_token("0123456789ABCDEF")
pat = github_get_token()
pat

# Test the PAT
github_reset_token()
try(github_test_token())
try(github_test_token("bad_token"))
}
\seealso{
\link{repo_branches}
}
